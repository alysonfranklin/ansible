---

  - name: Instalando pacote apt-transport-https - Distros Debian/Ubuntu
    apt:
      name: apt-transport-https
      update_cache: yes
      state: latest
    register: apt_https
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    tags: apt_https


  - name: Adicionando repositório do TeamViewer - Distros Debian/Ubuntu
    apt_repository:
      repo: deb http://linux.teamviewer.com/deb stable main stable non-free
      state: present
      filename: teamviewer
      update_cache: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and apt_https is success
    register: repo_teamviewer
    tags: repo_teamviewer


  - name: Adicionando key para o repositório do TeamViewer - Distros Debian/Ubuntu
    apt_key:
      url: "{{ key_teamviewer }}"
      state: present
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Instalando TeamViewer - Distros Ubuntu/Debian
    apt:
      name: teamviewer
      state: latest
      update_cache: yes
      force: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and repo_teamviewer is success
    tags: install_teamviewer


  - name: Instalando vim, git, curl, tmux & software-properties-common - Distros Debian/Ubuntu
    apt:
      name: [vim, git, curl, software-properties-common, tmux, zip, unzip, rar, unrar]
      state: latest
    tags: pacotes_essenciais
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Configurando tmux.conf
    get_url:
      url: "{{ config_tmux }}"
      dest: ~alyson
      mode: 0644
      owner: alyson
      group: alyson
    tags: tmux


  - name: Adicionando key GPG do Sublime-Text - Distros Debian/Ubuntu
    apt_key:
      url: https://download.sublimetext.com/sublimehq-pub.gpg
      state: present
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Adicionando repositório do Sublime-Text - Distros Debian/Ubuntu
    apt_repository:
      repo: "{{ repo_sublimetext }}"
      filename: sublime_text
      state: present
    register: sublime_text
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Instalando Sublime-Text - Distros Debian/Ubuntu
    apt:
      name: sublime-text
      state: latest
      force: yes
      update_cache: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and sublime_text is success
    tags: install_sublime_text


  - name: Baixando script do ChefDK - Distros Debian/Ubuntu
    get_url: 
      url: https://omnitruck.chef.io/install.sh
      dest: /tmp/chefdk.sh
      mode: 0755
    register: script_chefdk
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Instalando ChefDK - Distros Debian/Ubuntu
    command: ./chefdk.sh
    args:
      chdir: /tmp/
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and script_chefdk is success
    register: install_chef
    tags: install_chef
    ignore_errors: true


  - name: Removendo script /tmp/chefdk.sh - Distros Debian/Ubuntu
    file:
      path: /tmp/chefdk.sh
      state: absent
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and install_chef is success


  - name: Baixando script do Docker - Distros Debian/Ubuntu
    get_url:
      url: https://get.docker.com
      dest: /tmp/docker.sh
      mode: 0755
    register: script_docker
    tags: script_docker
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Instalando Docker - Distros Debian/Ubuntu
    command: /tmp/docker.sh
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and script_docker is success
    register: install_docker
    tags: install_docker
    ignore_errors: true


  - name: Removendo script /tmp/docker.sh - Distros Debian/Ubuntu
    file:
      path: /tmp/docker.sh
      state: absent
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and install_docker is success
    tags: remove_script_docker


  - name: Adicionando repositório do VirtualBox - Distros Debian/Ubuntu
    apt_repository:
      repo: deb https://download.virtualbox.org/virtualbox/debian {{ ansible_distribution_release }} contrib
      filename: virtualbox
      state: present
    register: repo_virtualbox
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Adicionando key do VirtualBox - Distros Debian/Ubuntu
    apt_key:
      url: https://www.virtualbox.org/download/oracle_vbox.asc
      state: present
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and repo_virtualbox is success
    ignore_errors: true


  - name: Instalando {{ virtualbox }} - Distros Debian/Ubuntu
    apt:
      name: "{{ virtualbox }}"
      state: latest
      update_cache: yes
      force: yes
    tags: install_virtualbox
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Instalando AWSCLI - Distros Debian/Ubuntu
    apt:
      name: awscli
      state: latest
      force: yes
    tags: install_awscli
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Adicionando repositório Remmina - Distros Debian/Ubuntu
    apt_repository:
      repo: ppa:remmina-ppa-team/remmina-next
      state: present
      filename: remmina
    register: repo_remmina
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Instalando Remmina - Distros Debian/Ubuntu
    apt:
      name: [remmina, remmina-plugin-rdp, libfreerdp-plugins-standard]
      state: latest
      update_cache: yes
      force: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and repo_remmina is success
    ignore_errors: true
    tags: install_remmina


  - name: Instalando Zsh - Distros Debian/Ubuntu
    apt:
      name: zsh
      state: latest
    register: install_zsh
    tags: install_zsh
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Instalando Oh-My-Zsh
    shell: wget --no-check-certificate http://install.ohmyz.sh -O - | sh
    args:
      chdir: ~alyson
      warn: false
    when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu" and install_zsh is success
    tags: zsh
    become_user: alyson
    become: true
    ignore_errors: yes


  - name: Configurando ZSH
    shell: rm -rf .zshrc ; wget "{{ zsh_config }}" && chown alyson. .zshrc 
    args:
      chdir: ~alyson
      warn: false
    tags: zsh_config

  - name: Configurando Git Config
    get_url: 
      url: "{{ git_config }}"
      dest: ~alyson
      owner: alyson
      group: alyson
      mode: 6444
    tags: git_config


  - name: Adicionando key do repositório Vagrant - Distros Debian/Ubuntu
    apt_key:
      keyserver: pgp.mit.edu
      id: AD319E0F7CFFA38B4D9F6E55CE3F3DE92099F7A4
      state: present
    tags: key_vagrant
    register: addkey_vagrant
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    ignore_errors: true


  - name: Adicionando repositório Vagrant - Distros Debian/Ubuntu
    apt_repository:
      repo: deb https://vagrant-deb.linestarve.com/ any main
      filename: vagrant
      state: present
    tags: repo_vagrant
    register: addrepo_vagrant
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Instalando Vagrant - Distros Debian/Ubuntu
    apt:
      name: vagrant
      state: latest
      update_cache: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and addrepo_vagrant is success
    tags: install_vagrant


  - name: Adicionando repositório NeoVim - Distros Debian/Ubuntu
    apt_repository:
      repo: ppa:neovim-ppa/stable
      state: present
      filename: neovim
    register: repo_neovim
    tags: repo_neovim
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Instalando NeoVim e Pré-requisitos do mesmo - Distros Debian/Ubuntu
    apt:
      name: [neovim, python-dev, python-pip, python3-dev, python3-pip, python3-setuptools]
      state: latest
      update_cache: yes
      force: yes
    register: install_neovim
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and repo_neovim is success
    tags: install_neovim


  - name: Setando NeoVim como editor padrão
    alternatives:
      name: vim
      path: /usr/bin/nvim
    when: install_neovim == 'result is succeeded' and ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    tags: set_neovim
    ignore_errors: true


  - name: Criando diretório ~alyson/.config/
    file:
      path: ~alyson/.config/
      state: directory
      owner: alyson
      group: alyson
    tags: create_dir_neovim


  - name: Clonando meu repositório do Neovim
    git:
      repo: "{{ repo_neovim }}"
      dest: ~alyson/.config/nvim
      recursive: yes
      update: yes
      clone: yes
    tags: clone_nvim
    ignore_errors: true


  - name: Adicionando key do repositório Spotify - Distros Debian/Ubuntu
    apt_key:
      keyserver: hkp://keyserver.ubuntu.com:80
      id: 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  
  - name: Adicionando repositório Spotify - Distros Debian/Ubuntu
    apt_repository:
      repo: deb http://repository.spotify.com stable non-free
      state: present
      filename: spotify
    register: repo_spotify
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Instalando Spotify - Distros Debian/Ubuntu
    apt:
      name: spotify-client
      state: latest
      update_cache: yes
      force: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and repo_spotify is success

  - name: Instalando GParted - Distros Debian/Ubuntu
    apt:
      name: gparted
      state: latest
    when: ansible_distribution == 'Debian' or ansible_distribution == "Ubuntu"
    tags: install_gparted

  - name: Baixando Terraform - Distros Debian/Ubuntu
    get_url:
      url: "{{ down_terraform }}"
      dest: /tmp/terraform.zip
    tags: down_terraform

  - name: Instalando Terraform - Distros Debian/Ubuntu
    unarchive:
      src: /tmp/terraform.zip
      dest: /usr/local/bin/
      remote_src: yes
    when: ansible_distribution == 'Debian' or ansible_distribution == "Ubuntu"
    tags: install_terraform